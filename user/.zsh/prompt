#!/usr/bin/zsh

# most from http://kriener.org/articles/2009/06/04/zsh-prompt-magic
setopt prompt_subst
autoload -Uz vcs_info
autoload colors

colors

# set some colors
for COLOR in RED GREEN YELLOW WHITE BLUE BLACK CYAN; do
    eval PR_$COLOR='%{$fg[${(L)COLOR}]%}'
    eval PB_$COLOR='%{$fg_bold[${(L)COLOR}]%}'
done
PR_RESET="%{${reset_color}%}";


#
# GIT magic (stolen from http://www.jukie.net/~bart/conf/zsh/rc/S60_prompt)
#
zstyle ':vcs_info:*' enable git svn
zstyle ':vcs_info:(svn|git)*' formats " ${PR_RESET}[${PR_RED}%b${PR_RESET}] "

# This variable dictates weather we are going to do the git prompt update
# before printing the next prompt.  On some setups this saves 10s of work.
PR_GIT_UPDATE=1

# called before command excution
# here we decide if we should update the prompt next time
function zsh_git_prompt_preexec {
    case "$(history $HISTCMD)" in
        *git*)
            PR_GIT_UPDATE=1
            ;;
    esac
}
preexec_functions=($preexec_functions zsh_git_prompt_preexec)

# called after directory change
# we just assume that we have to update git prompt
function zsh_git_prompt_chpwd {
    PR_GIT_UPDATE=1
}
chpwd_functions=($chpwd_functions zsh_git_prompt_chpwd)

# called before prompt generation
# if needed, we will update the prompt info
function zsh_git_prompt_precmd {
   if [[ -n "$PR_GIT_UPDATE" ]] ; then
           vcs_info 'prompt'
           PR_GIT_UPDATE=
   fi
}
precmd_functions=($precmd_functions zsh_git_prompt_precmd)


# THE PROMPT :)
PROMPT='[%*] ${PB_GREEN}%n${PR_RESET}@${PR_RED}%m${PR_CYAN}${CHROOT_NAME:+|}${CHROOT_NAME} ${PR_GREEN}(%?)${vcs_info_msg_0_}: ${PB_BLUE}%~${PR_RESET}%# '
